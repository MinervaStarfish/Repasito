{"cells":[{"cell_type":"markdown","metadata":{"id":"LeGvK-PgBRgF"},"source":["# **Curso de Inteligencia Artificial**\n","---\n","<div style=\"width: 100%; clear: both;\">\n","<div style=\"float: left; width: 50%;\">\n","<img src=\"https://github.com/AntonioEscamilla/images-in-readMe/raw/master/Curso%20IA/upb%20logo.jpg\", align=\"left\", width=\"350\">\n","</div>\n","\n","### **Facultad en Tecnologías de la Información y la Comunicación**\n","\n","### Escuela de Ingenierías\n","\n","### Universidad Pontificia Bolivariana\n","\n","---\n","\n","## **Docente: Ph.D. Antonio Escamilla**"]},{"cell_type":"markdown","metadata":{"id":"jgCxpL4IFFd6"},"source":["# **Preparación de Datos**\n","\n","En este cuaderno, se cubriran los siguientes temas:\n","\n","## Cargar los datos\n","\n","1.   Descripción de los tipos de datos\n","2.   Variable categórica en Pandas\n","\n","## Seleccionar variables\n","\n","1.   Eliminar variables irrelevantes\n","2.   Eliminar variables redundantes\n","\n","## Descripción Estadística\n","\n","1.   Histograma\n","2.   Box Plot\n","3.   Otras gráficas\n","\n","## Limpieza de Datos\n","\n","1.   Limpieza de atípicos\n","2.   Limpieza de nulos\n","\n","## Transformación de variables\n","\n","1. Transformación de variables categóricas a numéricas\n","2. Guardar los datos preparados"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"7zC4b-zAGIWN","executionInfo":{"status":"ok","timestamp":1756912654769,"user_tz":300,"elapsed":466,"user":{"displayName":"Mariana Osorio","userId":"12436033045337149683"}}},"outputs":[],"source":["# Librerías a importar\n","import pandas as pd                 # manipular conjuntos de datos (dataframe)\n","import numpy as np                  # operaciones matrices\n","import matplotlib.pyplot as plt     # gráficos"]},{"cell_type":"markdown","metadata":{"id":"4O1VHp0zxleA"},"source":["# <font color=\"blue\">1. Cargar los datos:</font> ⚡"]},{"cell_type":"markdown","metadata":{"id":"s3i0y_PyJ4Ns"},"source":["## Descripción de los tipos de datos"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DWW8tQSsuYI9","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1753904787942,"user_tz":300,"elapsed":39,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"29cdc6f3-c187-4ec7-fe10-a1e206d6b686"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   ID      Felder  Examen_admisión Aprobo\n","0   1   sensorial             4.67     si\n","1   2      activo             4.17     no\n","2   3      visual             4.50     si\n","3   4      visual             3.83     no\n","4   5  equilibrio             3.00     no"],"text/html":["\n","  <div id=\"df-76cbb70a-9791-456c-8254-5a11db97d7f4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Felder</th>\n","      <th>Examen_admisión</th>\n","      <th>Aprobo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>sensorial</td>\n","      <td>4.67</td>\n","      <td>si</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>activo</td>\n","      <td>4.17</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>visual</td>\n","      <td>4.50</td>\n","      <td>si</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>visual</td>\n","      <td>3.83</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>equilibrio</td>\n","      <td>3.00</td>\n","      <td>no</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-76cbb70a-9791-456c-8254-5a11db97d7f4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-76cbb70a-9791-456c-8254-5a11db97d7f4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-76cbb70a-9791-456c-8254-5a11db97d7f4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-708d1f30-351e-4bb0-b85d-c6b6cc549430\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-708d1f30-351e-4bb0-b85d-c6b6cc549430')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-708d1f30-351e-4bb0-b85d-c6b6cc549430 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_frame","summary":"{\n  \"name\": \"data_frame\",\n  \"rows\": 183,\n  \"fields\": [\n    {\n      \"column\": \"ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52,\n        \"min\": 1,\n        \"max\": 183,\n        \"num_unique_values\": 183,\n        \"samples\": [\n          20,\n          43,\n          156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Felder\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"activo\",\n          \"reflexivo\",\n          \"sensorial\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Examen_admisi\\u00f3n\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6216082825763062,\n        \"min\": 1.33,\n        \"max\": 5.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          4.67,\n          4.17,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Aprobo\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"si\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":51}],"source":["#leer la primera hoja del archivo de excel\n","data_frame=pd.read_excel ('/content/AprobacionCurso.xlsx', sheet_name= 0)\n","\n","# Muestra los 5 primeros registros del dataframe\n","data_frame.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1pzymM8ltPKT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753904790228,"user_tz":300,"elapsed":14,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"0c648223-ed94-4e7e-fca3-1fc5d63ca3f7"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 183 entries, 0 to 182\n","Data columns (total 4 columns):\n"," #   Column           Non-Null Count  Dtype  \n","---  ------           --------------  -----  \n"," 0   ID               183 non-null    int64  \n"," 1   Felder           182 non-null    object \n"," 2   Examen_admisión  181 non-null    float64\n"," 3   Aprobo           183 non-null    object \n","dtypes: float64(1), int64(1), object(2)\n","memory usage: 5.8+ KB\n"]}],"source":["# Descripción de los tipos de datos del dataframe\n","data_frame.info()"]},{"cell_type":"markdown","metadata":{"id":"EEPsrUR8H6Ek"},"source":["## Variable Categórica en Pandas\n","\n","Los `Categoricals` son un tipo de datos en pandas que corresponde a variables categóricas en estadísticas. Una variable categórica toma un número limitado, y generalmente fijo, de valores posibles (categorías). Ejemplos incluyen género, clase social, tipo de sangre, afiliación a un país, tiempo de observación o calificación a través de escalas Likert.\n","\n","A diferencia de las variables categóricas estadísticas, los datos categóricos pueden tener un orden (por ejemplo, 'totalmente de acuerdo' vs 'de acuerdo' o 'primera observación' vs 'segunda observación'), pero no son posibles operaciones numéricas (adiciones, divisiones, ...).\n","\n","Todos los valores de datos categóricos están en `categories` o `np.nan`. El orden se define por el orden de las categorías, no por el orden léxico de los valores. Internamente, la estructura de datos consiste en un array de `categories` y un array de enteros de `codes` que apuntan al valor real en el array de categorías.\n","\n","El tipo de dato categórico es útil en los siguientes casos:\n","\n","- Una variable string que consiste en solo unos pocos valores diferentes. Convertir una variable string de este tipo a una variable categórica puede ahorrar memoria.\n","\n","- El orden léxico de una variable no es el mismo que el orden lógico (\"uno\", \"dos\", \"tres\"). Al convertir a una categoría y especificar un orden en las categorías, la clasificación y el min/max utilizarán el orden lógico en lugar del orden léxico.\n","\n","- Como una señal a otras bibliotecas de Python de que esta columna debe tratarse como una variable categórica (por ejemplo, para utilizar métodos estadísticos adecuados o tipos de gráficos).\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uf8sYNUx1Slx"},"outputs":[],"source":["#Correccion de variables categóricas\n","\n","data_frame['Felder'] = data_frame['Felder'].astype(\"category\")\n","data_frame['Aprobo'] = data_frame['Aprobo'].astype(\"category\")"]},{"cell_type":"code","source":["data_frame.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RQCf00E4HgLw","executionInfo":{"status":"ok","timestamp":1753904796240,"user_tz":300,"elapsed":11,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"6275e53a-0604-48ae-ea08-04c2a703f81a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 183 entries, 0 to 182\n","Data columns (total 4 columns):\n"," #   Column           Non-Null Count  Dtype   \n","---  ------           --------------  -----   \n"," 0   ID               183 non-null    int64   \n"," 1   Felder           182 non-null    category\n"," 2   Examen_admisión  181 non-null    float64 \n"," 3   Aprobo           183 non-null    category\n","dtypes: category(2), float64(1), int64(1)\n","memory usage: 3.8 KB\n"]}]},{"cell_type":"markdown","metadata":{"id":"rgLj8guGpjVy"},"source":["# <font color=\"blue\">2. Seleccionar variables:</font> ⚡\n","\n","Al preparar datos para análisis o modelos de Machine Learning, es crucial identificar y tratar variables irrelevantes o redundantes en el conjunto de datos. Estas variables pueden afectar negativamente el rendimiento del modelo y añadir complejidad innecesaria al análisis. Aquí hay algunos pasos comunes en el tratamiento de estas variables:\n","\n","## Identificación de Variables Irrelevantes o Redundantes:\n","\n","1. **Análisis Exploratorio de Datos (EDA):** Realizar un EDA para comprender la relación entre las variables y su impacto en la variable objetivo. Se pueden utilizar gráficos y estadísticas descriptivas.\n","\n","2. **Correlación:** Calcular la correlación entre variables para identificar relaciones fuertes. Variables altamente correlacionadas pueden ser redundantes.\n","\n","3. **Importancia de Características:** Utilizar técnicas como la importancia de características en modelos de Machine Learning para identificar qué variables contribuyen significativamente a la predicción.\n","\n","## Tratamiento de Variables Irrelevantes o Redundantes:\n","\n","1. **Eliminación Directa:** Eliminar las variables que se determinan como irrelevantes o redundantes.\n","\n","2. **Selección de Características:** Utilizar métodos de selección de características para mantener solo aquellas que aportan información valiosa al modelo.\n","\n","3. **Transformación de Variables:** En algunos casos, se pueden combinar variables redundantes o realizar transformaciones para reducir la redundancia.\n","\n","### Sintaxis en Python (Eliminación Directa):\n","\n","```python\n","# Eliminación de variables, axis=1 indica que es una columna\n","data = data.drop(['variable_irrelevante1', 'variable_irrelevante2'], axis=1)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ofCKbHD4yMiy","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1753904798591,"user_tz":300,"elapsed":26,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"f1b58103-8a63-4cb9-9362-ec66964d2998"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Felder  Examen_admisión Aprobo\n","0   sensorial             4.67     si\n","1      activo             4.17     no\n","2      visual             4.50     si\n","3      visual             3.83     no\n","4  equilibrio             3.00     no"],"text/html":["\n","  <div id=\"df-17fa8f45-60e7-4fb6-8015-6365190ec43a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Felder</th>\n","      <th>Examen_admisión</th>\n","      <th>Aprobo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>sensorial</td>\n","      <td>4.67</td>\n","      <td>si</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>activo</td>\n","      <td>4.17</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>visual</td>\n","      <td>4.50</td>\n","      <td>si</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>visual</td>\n","      <td>3.83</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>equilibrio</td>\n","      <td>3.00</td>\n","      <td>no</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17fa8f45-60e7-4fb6-8015-6365190ec43a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-17fa8f45-60e7-4fb6-8015-6365190ec43a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-17fa8f45-60e7-4fb6-8015-6365190ec43a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-2b7d5935-c0db-48d1-b904-c3a1a0d5e6c1\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2b7d5935-c0db-48d1-b904-c3a1a0d5e6c1')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-2b7d5935-c0db-48d1-b904-c3a1a0d5e6c1 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_frame","summary":"{\n  \"name\": \"data_frame\",\n  \"rows\": 183,\n  \"fields\": [\n    {\n      \"column\": \"Felder\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"activo\",\n          \"reflexivo\",\n          \"sensorial\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Examen_admisi\\u00f3n\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6216082825763062,\n        \"min\": 1.33,\n        \"max\": 5.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          4.67,\n          4.17,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Aprobo\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"si\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":55}],"source":["#Eliminamos una variable irrelevante. Cual? Por que?\n","\n","data_frame = data_frame.drop(\"ID\", axis=1)\n","data_frame.head()"]},{"cell_type":"code","source":["data_frame.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"UUxYtGKMIQ90","executionInfo":{"status":"ok","timestamp":1753904800311,"user_tz":300,"elapsed":32,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"91e915a8-5b7a-4250-b5af-e981dc755cec"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Felder  Examen_admisión Aprobo\n","0   sensorial             4.67     si\n","1      activo             4.17     no\n","2      visual             4.50     si\n","3      visual             3.83     no\n","4  equilibrio             3.00     no"],"text/html":["\n","  <div id=\"df-865e884d-dcc5-4000-a016-d28b7325f258\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Felder</th>\n","      <th>Examen_admisión</th>\n","      <th>Aprobo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>sensorial</td>\n","      <td>4.67</td>\n","      <td>si</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>activo</td>\n","      <td>4.17</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>visual</td>\n","      <td>4.50</td>\n","      <td>si</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>visual</td>\n","      <td>3.83</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>equilibrio</td>\n","      <td>3.00</td>\n","      <td>no</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-865e884d-dcc5-4000-a016-d28b7325f258')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-865e884d-dcc5-4000-a016-d28b7325f258 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-865e884d-dcc5-4000-a016-d28b7325f258');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-03dd8e78-a41a-4a6d-a3e7-bb5eaa027262\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-03dd8e78-a41a-4a6d-a3e7-bb5eaa027262')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-03dd8e78-a41a-4a6d-a3e7-bb5eaa027262 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_frame","summary":"{\n  \"name\": \"data_frame\",\n  \"rows\": 183,\n  \"fields\": [\n    {\n      \"column\": \"Felder\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"activo\",\n          \"reflexivo\",\n          \"sensorial\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Examen_admisi\\u00f3n\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6216082825763062,\n        \"min\": 1.33,\n        \"max\": 5.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          4.67,\n          4.17,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Aprobo\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"si\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":56}]},{"cell_type":"markdown","metadata":{"id":"rayM4LR1SxW4"},"source":["# <font color=\"blue\">3. Descripción estadística:</font> ⚡\n","\n","### Variables Numéricas:\n","\n","1. **Histograma:**\n","   - **Descripción:** Representa la distribución de frecuencia de una variable numérica dividida en intervalos.\n","   - **Uso:** Permite visualizar la forma de la distribución, identificar la centralidad y dispersión.\n","\n","2. **Diagrama de caja (Boxplot):**\n","   - **Descripción:** Muestra la distribución de una variable numérica a través de cuartiles, identificando la presencia de valores atípicos.\n","   - **Uso:** Proporciona información sobre la mediana, dispersión y simetría de la distribución.\n","\n","3. **Gráfico de dispersión:**\n","   - **Descripción:** Representa la relación entre dos variables numéricas, mostrando la dispersión de los puntos en un plano.\n","   - **Uso:** Permite identificar patrones, correlaciones y posibles tendencias en los datos.\n","\n","### Variables Categóricas:\n","\n","1. **Diagrama de barras:**\n","   - **Descripción:** Muestra la frecuencia de las categorías en una variable categórica mediante barras.\n","   - **Uso:** Facilita la comparación entre categorías y la identificación de la categoría más frecuente.\n","\n","2. **Gráfico de sectores (o pie chart):**\n","   - **Descripción:** Representa la proporción de cada categoría en relación con el total mediante sectores circulares.\n","   - **Uso:** Visualiza la distribución relativa de las categorías en un conjunto de datos.\n","\n","3. **Gráfico de barras apiladas:**\n","   - **Descripción:** Muestra la contribución de cada categoría al total, apilando las barras.\n","   - **Uso:** Útil para visualizar la relación entre las categorías y su impacto en el conjunto de datos.\n","\n","En resumen, los métodos de descripción gráfica para variables numéricas se centran en representar **la distribución y relación entre valores**, mientras que para variables categóricas se enfocan en **la frecuencia y proporción de las categorías**. Ambos conjuntos de métodos proporcionan insights valiosos según la naturaleza de los datos.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7_E2pjNztPx1","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1753904803389,"user_tz":300,"elapsed":11,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"d246d7ca-fe2b-4d4c-869b-f4c4dfde16d2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Examen_admisión\n","count       181.000000\n","mean          3.891768\n","std           0.621608\n","min           1.330000\n","25%           3.500000\n","50%           3.830000\n","75%           4.330000\n","max           5.000000"],"text/html":["\n","  <div id=\"df-f573058c-a9f5-44e3-9a16-b88dda179df5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Examen_admisión</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>181.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>3.891768</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.621608</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.330000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>3.500000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>3.830000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>4.330000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>5.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f573058c-a9f5-44e3-9a16-b88dda179df5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f573058c-a9f5-44e3-9a16-b88dda179df5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f573058c-a9f5-44e3-9a16-b88dda179df5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-ded38c58-046b-4245-9c39-f516c2f8de19\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ded38c58-046b-4245-9c39-f516c2f8de19')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-ded38c58-046b-4245-9c39-f516c2f8de19 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data_frame\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Examen_admisi\\u00f3n\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.874325826691134,\n        \"min\": 0.6216082825763062,\n        \"max\": 181.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.8917679558011047,\n          3.83,\n          181.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":57}],"source":["data_frame.describe()             #Describe los datos numéricos"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3oJy3S4Ji5XT","colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1753904805156,"user_tz":300,"elapsed":127,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"13f0a80b-1f38-44fa-b9db-d066992b4d84"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='Frequency'>"]},"metadata":{},"execution_count":58},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#Graficar variables numéricas: histograma\n","data_frame['Examen_admisión'].plot(kind=\"hist\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qmAzWvUsHOrB","colab":{"base_uri":"https://localhost:8080/","height":447},"executionInfo":{"status":"ok","timestamp":1753904807353,"user_tz":300,"elapsed":118,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"80c685b1-85f2-406d-8ded-c5d132f7ace9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":59},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#Graficar variables numéricas: box\n","data_frame['Examen_admisión'].plot(kind=\"box\")"]},{"cell_type":"markdown","metadata":{"id":"LJePhItp_J2L"},"source":["![box-plot-construction](https://github.com/AntonioEscamilla/images-in-readMe/raw/master/Curso%20IA/box-plot-construction.png)\n","\n","En un box plot:\n","\n","* La \"caja\" representa el rango intercuartílico (IQR), que es la diferencia entre el tercer cuartil (Q3) y el primer cuartil (Q1). El 50% central de los datos se encuentra dentro de esta caja.\n","\n","* La línea dentro de la caja es la mediana, que es el valor medio del conjunto de datos.\n","\n","* Los \"bigotes\" se extienden desde la caja hasta los valores extremos, generalmente hasta 1.5 veces el IQR desde Q1 y Q3. Puntos fuera de los bigotes se consideran valores atípicos.\n","\n","* Los puntos individuales pueden representar valores atípicos que están más allá de los bigotes."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wjcdHOKnfK3S","colab":{"base_uri":"https://localhost:8080/","height":526},"executionInfo":{"status":"ok","timestamp":1753904809236,"user_tz":300,"elapsed":154,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"13c61fb6-79a8-4215-b775-087d8a710ff4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Felder'>"]},"metadata":{},"execution_count":60},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#Graficar variables categóricas: bar, barh\n","data_frame['Felder'].value_counts().plot(kind=\"bar\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3WEGhtxITGdw","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1753904810889,"user_tz":300,"elapsed":75,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"2499fd17-6eba-4243-de23-17154692e128"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='count'>"]},"metadata":{},"execution_count":61},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#Graficar variables categóricas: pie chart\n","data_frame['Aprobo'].value_counts().plot(kind=\"pie\")"]},{"cell_type":"code","source":["#Graficar variables categóricas: pie chart\n","data_frame['Aprobo'].value_counts().plot(kind=\"pie\", autopct='%1.1f%%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"BDBoj93SJWmb","executionInfo":{"status":"ok","timestamp":1753904812887,"user_tz":300,"elapsed":62,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"00985041-43b1-4fff-9df4-7be00d1f8a3b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='count'>"]},"metadata":{},"execution_count":62},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"yDhEesXFT5jg"},"source":["# <font color=\"blue\">4. Limpiar valores atípicos:</font> ⚡\n","\n","### Datos Atípicos en ML:\n","\n","Los datos atípicos, también conocidos como \"outliers\", son puntos de datos que se desvían significativamente del resto de la distribución. Estos valores extremos pueden afectar negativamente el análisis estadístico y distorsionar los resultados. La identificación y gestión de datos atípicos son cruciales en la ciencia de datos para obtener conclusiones más precisas y confiables.\n","\n","### Asignación de Valores Nulos:\n","\n","La asignación de valores nulos se refiere a la introducción de un valor especial, comúnmente representado como `NaN` (Not a Number), para indicar la ausencia de un valor válido en un conjunto de datos. Esto es especialmente útil cuando falta información o cuando un dato no puede ser recolectado o registrado. Al asignar valores nulos, se facilita el manejo y la interpretación de los datos incompletos sin afectar negativamente los cálculos y análisis.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DF_LbFixPLxK","colab":{"base_uri":"https://localhost:8080/","height":447},"executionInfo":{"status":"ok","timestamp":1753904815513,"user_tz":300,"elapsed":159,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"280825d8-dea2-43c5-881d-d53081df52bd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":63},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#Se asigna valor nulo a los atípicos\n","data_frame.loc[data_frame['Examen_admisión']<3, 'Examen_admisión'] = None\n","\n","#Graficar boxplot a la columna 'Examen_admisión'\n","data_frame['Examen_admisión'].plot(kind='box')"]},{"cell_type":"markdown","metadata":{"id":"Qo-L69OtUiSv"},"source":["# <font color=\"blue\">5. Limpiar nulos:</font> ⚡\n","\n","## Imputación de Datos Nulos:\n","\n","La imputación de datos nulos se refiere al proceso de rellenar los valores faltantes en un conjunto de datos. Cuando algunos datos están ausentes, la imputación ayuda a mantener la integridad y la utilidad del conjunto de datos para análisis y modelado.\n","\n","## Imputación por la Media y la Moda:\n","\n","### **Imputación por la Media:**\n","\n","La imputación por la media implica reemplazar los valores nulos con el valor promedio de una **variable numérica**. Este método es útil cuando los datos tienen una distribución aproximadamente simétrica y no están afectados por valores atípicos.\n","\n","### **Imputación por la Moda:**\n","\n","La imputación por la moda implica reemplazar los valores nulos con el valor más frecuente (moda) de la **variable categórica** o discreta. Este método es adecuado para variables categóricas y discretas, y es especialmente útil cuando la distribución tiene picos distintos.\n","\n","En resumen, la imputación de datos nulos es esencial para tratar valores faltantes, y la imputación por la media y la moda son estrategias comunes que se utilizan dependiendo de la naturaleza de los datos y el contexto del problema.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XIVg18h7jVoG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753904821246,"user_tz":300,"elapsed":14,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"38915f67-ef29-43b3-a409-ff4e74df3127"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 183 entries, 0 to 182\n","Data columns (total 3 columns):\n"," #   Column           Non-Null Count  Dtype   \n","---  ------           --------------  -----   \n"," 0   Felder           182 non-null    category\n"," 1   Examen_admisión  183 non-null    float64 \n"," 2   Aprobo           183 non-null    category\n","dtypes: category(2), float64(1)\n","memory usage: 2.4 KB\n"]}],"source":["#Limpieza de datos nulos: Imputación por la media\n","from sklearn.impute import SimpleImputer\n","\n","#Imputacion de variables numéricas\n","imputador_num = SimpleImputer(missing_values=np.nan, strategy='mean') #estrategy = la forma en que voy a imputar los datos (media = valores num) (moda = valores cat)\n","\n","# Usar metodo de transformación a los datos\n","data_frame['Examen_admisión'] = imputador_num.fit_transform(data_frame[['Examen_admisión']])\n","\n","data_frame.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u-zUbJeNymO6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753904823598,"user_tz":300,"elapsed":12,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"7cd443a9-e206-43b6-fc45-a5ea4ca23d84"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 183 entries, 0 to 182\n","Data columns (total 3 columns):\n"," #   Column           Non-Null Count  Dtype   \n","---  ------           --------------  -----   \n"," 0   Felder           183 non-null    object  \n"," 1   Examen_admisión  183 non-null    float64 \n"," 2   Aprobo           183 non-null    category\n","dtypes: category(1), float64(1), object(1)\n","memory usage: 3.3+ KB\n"]}],"source":["#Limpieza de datos nulos: Imputación por la moda\n","imputador_cat = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n","\n","data_frame[['Felder']] = imputador_cat.fit_transform(data_frame[['Felder']])\n","\n","\n","data_frame.info()"]},{"cell_type":"markdown","metadata":{"id":"BPlvpvITU6dX"},"source":["# <font color=\"blue\">6. Transformación de variables:</font> ⚡\n","\n","## Conversión de Variables Categóricas a Numéricas:\n","\n","En el procesamiento de datos, a menudo es necesario convertir variables categóricas en variables numéricas para su uso en algoritmos de aprendizaje automático u otros análisis estadísticos. Dos enfoques comunes para realizar esta conversión son el `LabelEncoder` y la creación de variables dummy.\n","\n","## LabelEncoder para la Variable Objetivo:\n","\n","El `LabelEncoder` se utiliza cuando se trata de convertir una variable categórica que representa la variable objetivo (**etiqueta**) en un formato numérico. Asigna un número único a cada categoría, permitiendo que el modelo trabaje con valores numéricos en lugar de etiquetas categóricas. Veremos un ejemplo en Python utilizando la biblioteca scikit-learn.\n","\n","## Variables Dummy para Otras Variables Categóricas:\n","Para las demás variables categóricas, se pueden crear variables dummy (**one-hot encoding**). Esto implica convertir cada categoría en una nueva columna binaria, indicando la presencia o ausencia de esa categoría. Veremos un ejemplo en Python utilizando la función `get_dummies` de pandas."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_7LhBhVk9zzj","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1753904827194,"user_tz":300,"elapsed":22,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"62a438c0-46f6-40c6-9527-6a7889515836"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Felder  Examen_admisión  Aprobo\n","0   sensorial             4.67       1\n","1      activo             4.17       0\n","2      visual             4.50       1\n","3      visual             3.83       0\n","4  equilibrio             3.00       0"],"text/html":["\n","  <div id=\"df-8df2a485-e31c-496b-80fb-2bc388351cab\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Felder</th>\n","      <th>Examen_admisión</th>\n","      <th>Aprobo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>sensorial</td>\n","      <td>4.67</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>activo</td>\n","      <td>4.17</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>visual</td>\n","      <td>4.50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>visual</td>\n","      <td>3.83</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>equilibrio</td>\n","      <td>3.00</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8df2a485-e31c-496b-80fb-2bc388351cab')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8df2a485-e31c-496b-80fb-2bc388351cab button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8df2a485-e31c-496b-80fb-2bc388351cab');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-b486341b-bee9-4b7c-b5e6-c0f4a881fd62\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b486341b-bee9-4b7c-b5e6-c0f4a881fd62')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-b486341b-bee9-4b7c-b5e6-c0f4a881fd62 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_frame","summary":"{\n  \"name\": \"data_frame\",\n  \"rows\": 183,\n  \"fields\": [\n    {\n      \"column\": \"Felder\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"activo\",\n          \"reflexivo\",\n          \"sensorial\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Examen_admisi\\u00f3n\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5708062007622707,\n        \"min\": 3.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          4.67,\n          4.17,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Aprobo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":66}],"source":["#Se codifican las categorias de la Variable Objetivo (Target Label)\n","from sklearn.preprocessing import LabelEncoder\n","\n","labelencoder = LabelEncoder()\n","\n","# Usar metodo de transformación a los datos\n","data_frame['Aprobo'] = labelencoder.fit_transform(data_frame['Aprobo'])\n","\n","data_frame.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5aY7y38l2u6Y","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1753904829510,"user_tz":300,"elapsed":33,"user":{"displayName":"Mariana Osorio Rojas","userId":"10457954682601696551"}},"outputId":"ecfe3849-b6c2-4349-8d5f-b66949ad9383"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Examen_admisión  Aprobo  Felder_activo  Felder_equilibrio  \\\n","0             4.67       1              0                  0   \n","1             4.17       0              1                  0   \n","2             4.50       1              0                  0   \n","3             3.83       0              0                  0   \n","4             3.00       0              0                  1   \n","\n","   Felder_intuitivo  Felder_reflexivo  Felder_secuencial  Felder_sensorial  \\\n","0                 0                 0                  0                 1   \n","1                 0                 0                  0                 0   \n","2                 0                 0                  0                 0   \n","3                 0                 0                  0                 0   \n","4                 0                 0                  0                 0   \n","\n","   Felder_verbal  Felder_visual  \n","0              0              0  \n","1              0              0  \n","2              0              1  \n","3              0              1  \n","4              0              0  "],"text/html":["\n","  <div id=\"df-3452a2d2-a2c1-4ce7-9e15-141887521ebd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Examen_admisión</th>\n","      <th>Aprobo</th>\n","      <th>Felder_activo</th>\n","      <th>Felder_equilibrio</th>\n","      <th>Felder_intuitivo</th>\n","      <th>Felder_reflexivo</th>\n","      <th>Felder_secuencial</th>\n","      <th>Felder_sensorial</th>\n","      <th>Felder_verbal</th>\n","      <th>Felder_visual</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.67</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.17</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.50</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.83</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3452a2d2-a2c1-4ce7-9e15-141887521ebd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3452a2d2-a2c1-4ce7-9e15-141887521ebd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3452a2d2-a2c1-4ce7-9e15-141887521ebd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-ac86ab09-dcab-4233-84e6-9ffdf9be541d\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ac86ab09-dcab-4233-84e6-9ffdf9be541d')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-ac86ab09-dcab-4233-84e6-9ffdf9be541d button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_frame","summary":"{\n  \"name\": \"data_frame\",\n  \"rows\": 183,\n  \"fields\": [\n    {\n      \"column\": \"Examen_admisi\\u00f3n\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5708062007622707,\n        \"min\": 3.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          4.67,\n          4.17,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Aprobo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Felder_activo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Felder_equilibrio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Felder_intuitivo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Felder_reflexivo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Felder_secuencial\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Felder_sensorial\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Felder_verbal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Felder_visual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":67}],"source":["#Creamos variables dummy para convertir  las categorías a números\n","data_frame = pd.get_dummies(data_frame, columns=['Felder'], dtype=int)\n","\n","data_frame.head()"]},{"cell_type":"markdown","metadata":{"id":"GcX76zGQqdqW"},"source":["# <font color=\"blue\">Guardamos los datos preparados:</font> ⚡"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"roKCRBm_onK9"},"outputs":[],"source":["#Guardamos los dataFrame preparados\n","data_frame.to_excel('./AprobacionCurso_preparados.xlsx')"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"nbformat":4,"nbformat_minor":0}